//! This crate was generated by `ritual`.
//! &#32;   &#32;   &#32;   &#32;   &#32;   See [README](https://github.com/rust-qt/ritual) for more information.

pub mod __ffi {
    //! Functions provided by the C++ wrapper library

    include!(concat!(env!("OUT_DIR"), "/ffi.rs"));
}
use std::ops::{Deref};
pub use ::cpp_core;
pub use ::cpp_std;
use cpp_std::VectorOfUchar;
use cpp_std::cpp_core::{CppBox};
use std::fmt;
use std::io::Read;
pub mod b_i_c_y_c_l;
use b_i_c_y_c_l::utils::{CLHSMCipherTextOfCLHSMqk, CLHSMPublicKeyOfCLHSMqk, CLHSMSecretKeyOfCLHSMqk};
use b_i_c_y_c_l::{Mpz, QFI};
use crate::b_i_c_y_c_l::{CLHSMqk, QFICompressedRepresentation};
/// C++ class: <span style='color: green;'>```std::allocator<BICYCL::QFI>```</span>.
#[repr(C)]
pub struct AllocatorOfQFI {
    _unused: u8,
}
impl AllocatorOfQFI {
    /// Calls C++ function: <span style='color: green;'>```std::allocator<BICYCL::QFI>& std::allocator<BICYCL::QFI>::operator=(const std::allocator<BICYCL::QFI>& other)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        other: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfQFI>>,
    ) -> ::cpp_core::MutRef<crate::AllocatorOfQFI> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_QFI_operator_(
            self as *mut crate::AllocatorOfQFI,
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfQFI>>::cast_into(other)
                .as_raw_ptr(),
        );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::QFI>::allocator()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::AllocatorOfQFI> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_QFI_allocator();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::QFI>::allocator(const std::allocator<BICYCL::QFI>& __a)```</span>.
    pub unsafe fn new_copy(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfQFI>>,
    ) -> ::cpp_core::CppBox<crate::AllocatorOfQFI> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_QFI_allocator1(
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfQFI>>::cast_into(a)
                .as_raw_ptr(),
        );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }
}

/// C++ class: <span style='color: green;'>```std::allocator<BICYCL::Mpz>```</span>.
#[repr(C)]
pub struct AllocatorOfMpz {
    _unused: u8,
}
impl AllocatorOfMpz {
    /// Calls C++ function: <span style='color: green;'>```std::allocator<BICYCL::Mpz>& std::allocator<BICYCL::Mpz>::operator=(const std::allocator<BICYCL::Mpz>& other)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        other: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfMpz>>,
    ) -> ::cpp_core::MutRef<crate::AllocatorOfMpz> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_Mpz_operator_(
            self as *mut crate::AllocatorOfMpz,
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfMpz>>::cast_into(other)
                .as_raw_ptr(),
        );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::Mpz>::allocator()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::AllocatorOfMpz> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_Mpz_allocator();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::Mpz>::allocator(const std::allocator<BICYCL::Mpz>& __a)```</span>.
    pub unsafe fn new_copy(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfMpz>>,
    ) -> ::cpp_core::CppBox<crate::AllocatorOfMpz> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_Mpz_allocator1(
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfMpz>>::cast_into(a)
                .as_raw_ptr(),
        );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }
}

/// C++ class: <span style='color: green;'>```std::allocator<BICYCL::SecLevel>```</span>.
#[repr(C)]
pub struct AllocatorOfSecLevel {
    _unused: u8,
}
impl AllocatorOfSecLevel {
    /// Calls C++ function: <span style='color: green;'>```std::allocator<BICYCL::SecLevel>& std::allocator<BICYCL::SecLevel>::operator=(const std::allocator<BICYCL::SecLevel>& other)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        other: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfSecLevel>>,
    ) -> ::cpp_core::MutRef<crate::AllocatorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_SecLevel_operator_(
            self as *mut crate::AllocatorOfSecLevel,
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfSecLevel>>::cast_into(other)
                .as_raw_ptr(),
        );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::SecLevel>::allocator()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::AllocatorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_SecLevel_allocator();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::SecLevel>::allocator(const std::allocator<BICYCL::SecLevel>& __a)```</span>.
    pub unsafe fn new_copy(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfSecLevel>>,
    ) -> ::cpp_core::CppBox<crate::AllocatorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_SecLevel_allocator1(
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfSecLevel>>::cast_into(a)
                .as_raw_ptr(),
        );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }
}

/// C++ class: <span style='color: green;'>```std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>```</span>.
#[repr(C)]
pub struct AllocatorOfCLHSMPublicKeyOfCLHSMqk {
    _unused: u8,
}
impl AllocatorOfCLHSMPublicKeyOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>& std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>::operator=(const std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>& other)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        other: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>,
    ) -> ::cpp_core::MutRef<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_operator_(self as *mut crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>::cast_into(other).as_raw_ptr());
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>::allocator()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_allocator();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>::allocator(const std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>& __a)```</span>.
    pub unsafe fn new_copy(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_allocator1(::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }
}

/// C++ class: <span style='color: green;'>```std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>```</span>.
#[repr(C)]
pub struct AllocatorOfCLHSMClearTextOfCLHSMqk {
    _unused: u8,
}
impl AllocatorOfCLHSMClearTextOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>& std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>::operator=(const std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>& other)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        other: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>,
    ) -> ::cpp_core::MutRef<crate::AllocatorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_operator_(self as *mut crate::AllocatorOfCLHSMClearTextOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>::cast_into(other).as_raw_ptr());
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>::allocator()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::AllocatorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_allocator();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>::allocator(const std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>& __a)```</span>.
    pub unsafe fn new_copy(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::AllocatorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_allocator1(::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }
}

/// C++ class: <span style='color: green;'>```std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>```</span>.
#[repr(C)]
pub struct AllocatorOfCLHSMCipherTextOfCLHSMqk {
    _unused: u8,
}
impl AllocatorOfCLHSMCipherTextOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>& std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>::operator=(const std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>& other)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        other: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>,
    ) -> ::cpp_core::MutRef<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_operator_(self as *mut crate::AllocatorOfCLHSMCipherTextOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>::cast_into(other).as_raw_ptr());
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>::allocator()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_allocator();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>::allocator(const std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>& __a)```</span>.
    pub unsafe fn new_copy(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_allocator1(::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }
}

/// C++ class: <span style='color: green;'>```std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>```</span>.
#[repr(C)]
pub struct VectorOfQFI {
    _unused: u8,
}
impl VectorOfQFI {
    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::assign(size_t __n, const BICYCL::QFI& __val)```</span>.
    pub unsafe fn assign_usize_q_f_i(
        &mut self,
        n: usize,
        val: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::QFI>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_assign(
            self as *mut crate::VectorOfQFI,
            n,
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::QFI>>::cast_into(val)
                .as_raw_ptr(),
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::assign(const BICYCL::QFI* first, const BICYCL::QFI* last)```</span>.
    pub unsafe fn assign_2_q_f_i(
        &mut self,
        first: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>,
        last: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_assign1(
            self as *mut crate::VectorOfQFI,
            ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>::cast_into(first)
                .as_raw_ptr(),
            ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>::cast_into(last)
                .as_raw_ptr(),
        )
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::QFI& std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::at(size_t __n)```</span>.
    pub unsafe fn at_mut(&mut self, n: usize) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_at(
                self as *mut crate::VectorOfQFI,
                n,
            );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::QFI& std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::at(size_t __n) const```</span>.
    pub unsafe fn at(&self, n: usize) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_at1(
                self as *const crate::VectorOfQFI,
                n,
            );
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::QFI& std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::back()```</span>.
    pub unsafe fn back_mut(&mut self) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_back(
                self as *mut crate::VectorOfQFI,
            );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::QFI& std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::back() const```</span>.
    pub unsafe fn back(&self) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_back1(
                self as *const crate::VectorOfQFI,
            );
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::capacity() const```</span>.
    pub unsafe fn capacity(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_capacity(
            self as *const crate::VectorOfQFI,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::clear()```</span>.
    pub unsafe fn clear(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_clear(
            self as *mut crate::VectorOfQFI,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>& std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::operator=(const std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>& __x)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfQFI>>,
    ) -> ::cpp_core::MutRef<crate::VectorOfQFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_operator_(
                self as *mut crate::VectorOfQFI,
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfQFI>>::cast_into(x)
                    .as_raw_ptr(),
            );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::QFI* std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::data()```</span>.
    pub unsafe fn data_mut(&mut self) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_data(
                self as *mut crate::VectorOfQFI,
            );
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::QFI* std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::data() const```</span>.
    pub unsafe fn data(&self) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_data1(
                self as *const crate::VectorOfQFI,
            );
        ::cpp_core::Ptr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```bool std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::empty() const```</span>.
    pub unsafe fn empty(&self) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_empty(
            self as *const crate::VectorOfQFI,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::QFI& std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::front()```</span>.
    pub unsafe fn front_mut(&mut self) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_front(
                self as *mut crate::VectorOfQFI,
            );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::QFI& std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::front() const```</span>.
    pub unsafe fn front(&self) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_front1(
                self as *const crate::VectorOfQFI,
            );
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::QFI& std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::operator[](size_t __n)```</span>.
    pub unsafe fn index_mut(&mut self, n: usize) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_operator__(
                self as *mut crate::VectorOfQFI,
                n,
            );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::QFI& std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::operator[](size_t __n) const```</span>.
    pub unsafe fn index(&self, n: usize) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_operator__1(
                self as *const crate::VectorOfQFI,
                n,
            );
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::max_size() const```</span>.
    pub unsafe fn max_size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_max_size(
            self as *const crate::VectorOfQFI,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::vector()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::VectorOfQFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_vector();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::vector(const std::allocator<BICYCL::QFI>& __a)```</span>.
    pub unsafe fn from_allocator_of_q_f_i(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfQFI>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfQFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_vector1(
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfQFI>>::cast_into(a)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::vector(size_t __n, const std::allocator<BICYCL::QFI>& __a = …)```</span>.
    pub unsafe fn from_usize_allocator_of_q_f_i(
        n: usize,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfQFI>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfQFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_vector2(
                n,
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfQFI>>::cast_into(a)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::vector(size_t __n, const BICYCL::QFI& __value, const std::allocator<BICYCL::QFI>& __a = …)```</span>.
    pub unsafe fn from_usize_q_f_i_allocator_of_q_f_i(
        n: usize,
        value: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::QFI>>,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfQFI>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfQFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_vector3(
                n,
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::QFI>>::cast_into(value)
                    .as_raw_ptr(),
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfQFI>>::cast_into(a)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::vector(const std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>& __x, const std::allocator<BICYCL::QFI>& __a)```</span>.
    pub unsafe fn from_vector_of_q_f_i_allocator_of_q_f_i(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfQFI>>,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfQFI>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfQFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_vector6(
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfQFI>>::cast_into(x)
                    .as_raw_ptr(),
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfQFI>>::cast_into(a)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::vector(const BICYCL::QFI* first, const BICYCL::QFI* last, std::allocator<BICYCL::QFI> alloc = …)```</span>.
    pub unsafe fn from_2_q_f_i_allocator_of_q_f_i(
        first: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>,
        last: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>,
        alloc: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfQFI>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfQFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_vector8(
                ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>::cast_into(first)
                    .as_raw_ptr(),
                ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>::cast_into(last)
                    .as_raw_ptr(),
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfQFI>>::cast_into(alloc)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::vector(size_t __n)```</span>.
    pub unsafe fn from_usize(n: usize) -> ::cpp_core::CppBox<crate::VectorOfQFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_vector9(n);
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::vector(size_t __n, const BICYCL::QFI& __value)```</span>.
    pub unsafe fn from_usize_q_f_i(
        n: usize,
        value: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::QFI>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfQFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_vector10(
                n,
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::QFI>>::cast_into(value)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::vector(const BICYCL::QFI* first, const BICYCL::QFI* last)```</span>.
    pub unsafe fn from_2_q_f_i(
        first: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>,
        last: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfQFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_vector11(
                ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>::cast_into(first)
                    .as_raw_ptr(),
                ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>>::cast_into(last)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::vector(const std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>& __x)```</span>.
    pub unsafe fn new_copy(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfQFI>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfQFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_vector4(
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfQFI>>::cast_into(x)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::pop_back()```</span>.
    pub unsafe fn pop_back(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_pop_back(
            self as *mut crate::VectorOfQFI,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::push_back(const BICYCL::QFI& __x)```</span>.
    pub unsafe fn push_back(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::QFI>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_push_back(
            self as *mut crate::VectorOfQFI,
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::QFI>>::cast_into(x)
                .as_raw_ptr(),
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::reserve(size_t __n)```</span>.
    pub unsafe fn reserve(&mut self, n: usize) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_reserve(
            self as *mut crate::VectorOfQFI,
            n,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::resize(size_t __new_size)```</span>.
    pub unsafe fn resize_1a(&mut self, new_size: usize) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_resize(
            self as *mut crate::VectorOfQFI,
            new_size,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::resize(size_t __new_size, const BICYCL::QFI& __x)```</span>.
    pub unsafe fn resize_2a(
        &mut self,
        new_size: usize,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::QFI>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_resize1(
            self as *mut crate::VectorOfQFI,
            new_size,
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::QFI>>::cast_into(x)
                .as_raw_ptr(),
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::shrink_to_fit()```</span>.
    pub unsafe fn shrink_to_fit(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_shrink_to_fit(
            self as *mut crate::VectorOfQFI,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::size() const```</span>.
    pub unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_size(
            self as *const crate::VectorOfQFI,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::swap(std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>& __x)```</span>.
    pub unsafe fn swap(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::MutRef<crate::VectorOfQFI>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_swap(
            self as *mut crate::VectorOfQFI,
            ::cpp_core::CastInto::<::cpp_core::MutRef<crate::VectorOfQFI>>::cast_into(x)
                .as_mut_raw_ptr(),
        )
    }
}

/// C++ class: <span style='color: green;'>```std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>```</span>.
#[repr(C)]
pub struct VectorOfMpz {
    _unused: u8,
}
impl VectorOfMpz {
    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::assign(size_t __n, const BICYCL::Mpz& __val)```</span>.
    pub unsafe fn assign_usize_mpz(
        &mut self,
        n: usize,
        val: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_assign(
            self as *mut crate::VectorOfMpz,
            n,
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz>>::cast_into(val)
                .as_raw_ptr(),
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::assign(const BICYCL::Mpz* first, const BICYCL::Mpz* last)```</span>.
    pub unsafe fn assign_2_mpz(
        &mut self,
        first: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>,
        last: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_assign1(
            self as *mut crate::VectorOfMpz,
            ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>::cast_into(first)
                .as_raw_ptr(),
            ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>::cast_into(last)
                .as_raw_ptr(),
        )
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::Mpz& std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::at(size_t __n)```</span>.
    pub unsafe fn at_mut(&mut self, n: usize) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_at(
                self as *mut crate::VectorOfMpz,
                n,
            );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::Mpz& std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::at(size_t __n) const```</span>.
    pub unsafe fn at(&self, n: usize) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_at1(
                self as *const crate::VectorOfMpz,
                n,
            );
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::Mpz& std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::back()```</span>.
    pub unsafe fn back_mut(&mut self) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_back(
                self as *mut crate::VectorOfMpz,
            );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::Mpz& std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::back() const```</span>.
    pub unsafe fn back(&self) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_back1(
                self as *const crate::VectorOfMpz,
            );
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::capacity() const```</span>.
    pub unsafe fn capacity(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_capacity(
            self as *const crate::VectorOfMpz,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::clear()```</span>.
    pub unsafe fn clear(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_clear(
            self as *mut crate::VectorOfMpz,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::operator=(const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __x)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfMpz>>,
    ) -> ::cpp_core::MutRef<crate::VectorOfMpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_operator_(
                self as *mut crate::VectorOfMpz,
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfMpz>>::cast_into(x)
                    .as_raw_ptr(),
            );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::Mpz* std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::data()```</span>.
    pub unsafe fn data_mut(&mut self) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_data(
                self as *mut crate::VectorOfMpz,
            );
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::Mpz* std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::data() const```</span>.
    pub unsafe fn data(&self) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_data1(
                self as *const crate::VectorOfMpz,
            );
        ::cpp_core::Ptr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```bool std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::empty() const```</span>.
    pub unsafe fn empty(&self) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_empty(
            self as *const crate::VectorOfMpz,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::Mpz& std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::front()```</span>.
    pub unsafe fn front_mut(&mut self) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_front(
                self as *mut crate::VectorOfMpz,
            );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::Mpz& std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::front() const```</span>.
    pub unsafe fn front(&self) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_front1(
                self as *const crate::VectorOfMpz,
            );
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::Mpz& std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::operator[](size_t __n)```</span>.
    pub unsafe fn index_mut(&mut self, n: usize) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_operator__(
                self as *mut crate::VectorOfMpz,
                n,
            );
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::Mpz& std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::operator[](size_t __n) const```</span>.
    pub unsafe fn index(&self, n: usize) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_operator__1(
                self as *const crate::VectorOfMpz,
                n,
            );
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::max_size() const```</span>.
    pub unsafe fn max_size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_max_size(
            self as *const crate::VectorOfMpz,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::vector()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::VectorOfMpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_vector();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::vector(const std::allocator<BICYCL::Mpz>& __a)```</span>.
    pub unsafe fn from_allocator_of_mpz(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfMpz>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfMpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_vector1(
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfMpz>>::cast_into(a)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::vector(size_t __n, const std::allocator<BICYCL::Mpz>& __a = …)```</span>.
    pub unsafe fn from_usize_allocator_of_mpz(
        n: usize,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfMpz>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfMpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_vector2(
                n,
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfMpz>>::cast_into(a)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::vector(size_t __n, const BICYCL::Mpz& __value, const std::allocator<BICYCL::Mpz>& __a = …)```</span>.
    pub unsafe fn from_usize_mpz_allocator_of_mpz(
        n: usize,
        value: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz>>,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfMpz>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfMpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_vector3(
                n,
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz>>::cast_into(value)
                    .as_raw_ptr(),
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfMpz>>::cast_into(a)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::vector(const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __x, const std::allocator<BICYCL::Mpz>& __a)```</span>.
    pub unsafe fn from_vector_of_mpz_allocator_of_mpz(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfMpz>>,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfMpz>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfMpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_vector6(
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfMpz>>::cast_into(x)
                    .as_raw_ptr(),
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfMpz>>::cast_into(a)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::vector(const BICYCL::Mpz* first, const BICYCL::Mpz* last, std::allocator<BICYCL::Mpz> alloc = …)```</span>.
    pub unsafe fn from_2_mpz_allocator_of_mpz(
        first: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>,
        last: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>,
        alloc: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfMpz>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfMpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_vector8(
                ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>::cast_into(first)
                    .as_raw_ptr(),
                ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>::cast_into(last)
                    .as_raw_ptr(),
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfMpz>>::cast_into(alloc)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::vector(size_t __n)```</span>.
    pub unsafe fn from_usize(n: usize) -> ::cpp_core::CppBox<crate::VectorOfMpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_vector9(n);
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::vector(size_t __n, const BICYCL::Mpz& __value)```</span>.
    pub unsafe fn from_usize_mpz(
        n: usize,
        value: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfMpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_vector10(
                n,
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz>>::cast_into(value)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::vector(const BICYCL::Mpz* first, const BICYCL::Mpz* last)```</span>.
    pub unsafe fn from_2_mpz(
        first: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>,
        last: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfMpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_vector11(
                ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>::cast_into(first)
                    .as_raw_ptr(),
                ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>>::cast_into(last)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::vector(const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __x)```</span>.
    pub unsafe fn new_copy(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfMpz>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfMpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_vector4(
                ::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfMpz>>::cast_into(x)
                    .as_raw_ptr(),
            );
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::pop_back()```</span>.
    pub unsafe fn pop_back(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_pop_back(
            self as *mut crate::VectorOfMpz,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::push_back(const BICYCL::Mpz& __x)```</span>.
    pub unsafe fn push_back(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_push_back(
            self as *mut crate::VectorOfMpz,
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz>>::cast_into(x)
                .as_raw_ptr(),
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::reserve(size_t __n)```</span>.
    pub unsafe fn reserve(&mut self, n: usize) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_reserve(
            self as *mut crate::VectorOfMpz,
            n,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::resize(size_t __new_size)```</span>.
    pub unsafe fn resize_1a(&mut self, new_size: usize) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_resize(
            self as *mut crate::VectorOfMpz,
            new_size,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::resize(size_t __new_size, const BICYCL::Mpz& __x)```</span>.
    pub unsafe fn resize_2a(
        &mut self,
        new_size: usize,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_resize1(
            self as *mut crate::VectorOfMpz,
            new_size,
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::Mpz>>::cast_into(x)
                .as_raw_ptr(),
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::shrink_to_fit()```</span>.
    pub unsafe fn shrink_to_fit(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_shrink_to_fit(
            self as *mut crate::VectorOfMpz,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::size() const```</span>.
    pub unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_size(
            self as *const crate::VectorOfMpz,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::swap(std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __x)```</span>.
    pub unsafe fn swap(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::MutRef<crate::VectorOfMpz>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_swap(
            self as *mut crate::VectorOfMpz,
            ::cpp_core::CastInto::<::cpp_core::MutRef<crate::VectorOfMpz>>::cast_into(x)
                .as_mut_raw_ptr(),
        )
    }
}

/// C++ class: <span style='color: green;'>```std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>```</span>.
#[repr(C)]
pub struct VectorOfSecLevel {
    _unused: u8,
}
impl VectorOfSecLevel {
    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::assign(size_t __n, const BICYCL::SecLevel& __val)```</span>.
    pub unsafe fn assign_usize_sec_level(
        &mut self,
        n: usize,
        val: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_assign(
            self as *mut crate::VectorOfSecLevel,
            n,
            ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel>>::cast_into(val)
                .as_raw_ptr(),
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::assign(const BICYCL::SecLevel* first, const BICYCL::SecLevel* last)```</span>.
    pub unsafe fn assign_2_sec_level(
        &mut self,
        first: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>,
        last: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_assign1(self as *mut crate::VectorOfSecLevel, ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>::cast_into(last).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::SecLevel& std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::at(size_t __n)```</span>.
    pub unsafe fn at_mut(&mut self, n: usize) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_at(self as *mut crate::VectorOfSecLevel, n);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::SecLevel& std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::at(size_t __n) const```</span>.
    pub unsafe fn at(&self, n: usize) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_at1(self as *const crate::VectorOfSecLevel, n);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::SecLevel& std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::back()```</span>.
    pub unsafe fn back_mut(&mut self) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_back(self as *mut crate::VectorOfSecLevel);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::SecLevel& std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::back() const```</span>.
    pub unsafe fn back(&self) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_back1(self as *const crate::VectorOfSecLevel);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::capacity() const```</span>.
    pub unsafe fn capacity(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_capacity(self as *const crate::VectorOfSecLevel)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::clear()```</span>.
    pub unsafe fn clear(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_clear(
            self as *mut crate::VectorOfSecLevel,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::operator=(const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __x)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfSecLevel>>,
    ) -> ::cpp_core::MutRef<crate::VectorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_operator_(self as *mut crate::VectorOfSecLevel, ::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfSecLevel>>::cast_into(x).as_raw_ptr());
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::SecLevel* std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::data()```</span>.
    pub unsafe fn data_mut(&mut self) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_data(self as *mut crate::VectorOfSecLevel);
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::SecLevel* std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::data() const```</span>.
    pub unsafe fn data(&self) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_data1(self as *const crate::VectorOfSecLevel);
        ::cpp_core::Ptr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```bool std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::empty() const```</span>.
    pub unsafe fn empty(&self) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_empty(
            self as *const crate::VectorOfSecLevel,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::SecLevel& std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::front()```</span>.
    pub unsafe fn front_mut(&mut self) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_front(self as *mut crate::VectorOfSecLevel);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::SecLevel& std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::front() const```</span>.
    pub unsafe fn front(&self) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_front1(self as *const crate::VectorOfSecLevel);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::SecLevel& std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::operator[](size_t __n)```</span>.
    pub unsafe fn index_mut(
        &mut self,
        n: usize,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_operator__(self as *mut crate::VectorOfSecLevel, n);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::SecLevel& std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::operator[](size_t __n) const```</span>.
    pub unsafe fn index(&self, n: usize) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_operator__1(self as *const crate::VectorOfSecLevel, n);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::max_size() const```</span>.
    pub unsafe fn max_size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_max_size(self as *const crate::VectorOfSecLevel)
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::vector()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::VectorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_vector();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::vector(const std::allocator<BICYCL::SecLevel>& __a)```</span>.
    pub unsafe fn from_allocator_of_sec_level(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfSecLevel>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_vector1(::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfSecLevel>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::vector(size_t __n, const BICYCL::SecLevel& __value, const std::allocator<BICYCL::SecLevel>& __a = …)```</span>.
    pub unsafe fn from_usize_sec_level_allocator_of_sec_level(
        n: usize,
        value: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel>>,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfSecLevel>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_vector3(n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel>>::cast_into(value).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfSecLevel>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::vector(const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __x, const std::allocator<BICYCL::SecLevel>& __a)```</span>.
    pub unsafe fn from_vector_of_sec_level_allocator_of_sec_level(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfSecLevel>>,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfSecLevel>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_vector6(::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfSecLevel>>::cast_into(x).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfSecLevel>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::vector(const BICYCL::SecLevel* first, const BICYCL::SecLevel* last, std::allocator<BICYCL::SecLevel> alloc = …)```</span>.
    pub unsafe fn from_2_sec_level_allocator_of_sec_level(
        first: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>,
        last: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>,
        alloc: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfSecLevel>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_vector8(::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>::cast_into(last).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfSecLevel>>::cast_into(alloc).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::vector(size_t __n, const BICYCL::SecLevel& __value)```</span>.
    pub unsafe fn from_usize_sec_level(
        n: usize,
        value: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_vector10(n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel>>::cast_into(value).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::vector(const BICYCL::SecLevel* first, const BICYCL::SecLevel* last)```</span>.
    pub unsafe fn from_2_sec_level(
        first: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>,
        last: impl ::cpp_core::CastInto<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_vector11(::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>>::cast_into(last).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::vector(const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __x)```</span>.
    pub unsafe fn new_copy(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfSecLevel>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfSecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_vector4(::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfSecLevel>>::cast_into(x).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::pop_back()```</span>.
    pub unsafe fn pop_back(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_pop_back(self as *mut crate::VectorOfSecLevel)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::push_back(const BICYCL::SecLevel& __x)```</span>.
    pub unsafe fn push_back(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_push_back(self as *mut crate::VectorOfSecLevel, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel>>::cast_into(x).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::reserve(size_t __n)```</span>.
    pub unsafe fn reserve(&mut self, n: usize) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_reserve(self as *mut crate::VectorOfSecLevel, n)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::resize(size_t __new_size, const BICYCL::SecLevel& __x)```</span>.
    pub unsafe fn resize(
        &mut self,
        new_size: usize,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_resize1(self as *mut crate::VectorOfSecLevel, new_size, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::SecLevel>>::cast_into(x).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::shrink_to_fit()```</span>.
    pub unsafe fn shrink_to_fit(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_shrink_to_fit(self as *mut crate::VectorOfSecLevel)
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::size() const```</span>.
    pub unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_size(
            self as *const crate::VectorOfSecLevel,
        )
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::swap(std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __x)```</span>.
    pub unsafe fn swap(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::MutRef<crate::VectorOfSecLevel>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_swap(
            self as *mut crate::VectorOfSecLevel,
            ::cpp_core::CastInto::<::cpp_core::MutRef<crate::VectorOfSecLevel>>::cast_into(x)
                .as_mut_raw_ptr(),
        )
    }
}

/// C++ class: <span style='color: green;'>```std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>```</span>.
#[repr(C)]
pub struct VectorOfCLHSMPublicKeyOfCLHSMqk {
    _unused: u8,
}
impl VectorOfCLHSMPublicKeyOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::assign(size_t __n, const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& __val)```</span>.
    pub unsafe fn assign_usize_c_l_h_s_m_public_key_of_c_l_h_s_mqk(
        &mut self,
        n: usize,
        val: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_assign(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk, n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>>::cast_into(val).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::assign(const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>* first, const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>* last)```</span>.
    pub unsafe fn assign_2_c_l_h_s_m_public_key_of_c_l_h_s_mqk(
        &mut self,
        first: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>,
        >,
        last: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_assign1(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>>::cast_into(last).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::at(size_t __n)```</span>.
    pub unsafe fn at_mut(
        &mut self,
        n: usize,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_at(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk, n);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::at(size_t __n) const```</span>.
    pub unsafe fn at(
        &self,
        n: usize,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_at1(self as *const crate::VectorOfCLHSMPublicKeyOfCLHSMqk, n);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::back()```</span>.
    pub unsafe fn back_mut(
        &mut self,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_back(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::back() const```</span>.
    pub unsafe fn back(
        &self,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_back1(self as *const crate::VectorOfCLHSMPublicKeyOfCLHSMqk);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::capacity() const```</span>.
    pub unsafe fn capacity(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_capacity(self as *const crate::VectorOfCLHSMPublicKeyOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::clear()```</span>.
    pub unsafe fn clear(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_clear(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>& std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::operator=(const std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>& __x)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfCLHSMPublicKeyOfCLHSMqk>>,
    ) -> ::cpp_core::MutRef<crate::VectorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_operator_(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfCLHSMPublicKeyOfCLHSMqk>>::cast_into(x).as_raw_ptr());
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::data()```</span>.
    pub unsafe fn data_mut(
        &mut self,
    ) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_data(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk);
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::data() const```</span>.
    pub unsafe fn data(
        &self,
    ) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_data1(self as *const crate::VectorOfCLHSMPublicKeyOfCLHSMqk);
        ::cpp_core::Ptr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```bool std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::empty() const```</span>.
    pub unsafe fn empty(&self) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_empty(self as *const crate::VectorOfCLHSMPublicKeyOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::front()```</span>.
    pub unsafe fn front_mut(
        &mut self,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_front(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::front() const```</span>.
    pub unsafe fn front(
        &self,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_front1(self as *const crate::VectorOfCLHSMPublicKeyOfCLHSMqk);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::operator[](size_t __n)```</span>.
    pub unsafe fn index_mut(
        &mut self,
        n: usize,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_operator__(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk, n);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::operator[](size_t __n) const```</span>.
    pub unsafe fn index(
        &self,
        n: usize,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_operator__1(self as *const crate::VectorOfCLHSMPublicKeyOfCLHSMqk, n);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::max_size() const```</span>.
    pub unsafe fn max_size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_max_size(self as *const crate::VectorOfCLHSMPublicKeyOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::vector()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::VectorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_vector();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::vector(const std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>& __a)```</span>.
    pub unsafe fn from_allocator_of_c_l_h_s_m_public_key_of_c_l_h_s_mqk(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_vector1(::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::vector(size_t __n, const std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>& __a = …)```</span>.
    pub unsafe fn from_usize_allocator_of_c_l_h_s_m_public_key_of_c_l_h_s_mqk(
        n: usize,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_vector2(n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::vector(size_t __n, const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& __value, const std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>& __a = …)```</span>.
    pub unsafe fn from_usize_c_l_h_s_m_public_key_of_c_l_h_s_mqk_allocator_of_c_l_h_s_m_public_key_of_c_l_h_s_mqk(
        n: usize,
        value: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>,
        >,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_vector3(n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>>::cast_into(value).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::vector(const std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>& __x, const std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>& __a)```</span>.
    pub unsafe fn from_vector_of_c_l_h_s_m_public_key_of_c_l_h_s_mqk_allocator_of_c_l_h_s_m_public_key_of_c_l_h_s_mqk(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfCLHSMPublicKeyOfCLHSMqk>>,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_vector6(::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfCLHSMPublicKeyOfCLHSMqk>>::cast_into(x).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::vector(const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>* first, const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>* last, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>> alloc = …)```</span>.
    pub unsafe fn from_2_c_l_h_s_m_public_key_of_c_l_h_s_mqk_allocator_of_c_l_h_s_m_public_key_of_c_l_h_s_mqk(
        first: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>,
        >,
        last: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>,
        >,
        alloc: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_vector8(::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>>::cast_into(last).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>::cast_into(alloc).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::vector(size_t __n)```</span>.
    pub unsafe fn from_usize(
        n: usize,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_vector9(n);
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::vector(size_t __n, const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& __value)```</span>.
    pub unsafe fn from_usize_c_l_h_s_m_public_key_of_c_l_h_s_mqk(
        n: usize,
        value: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>,
        >,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_vector10(n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>>::cast_into(value).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::vector(const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>* first, const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>* last)```</span>.
    pub unsafe fn from_2_c_l_h_s_m_public_key_of_c_l_h_s_mqk(
        first: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>,
        >,
        last: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>,
        >,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_vector11(::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>>::cast_into(last).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::vector(const std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>& __x)```</span>.
    pub unsafe fn new_copy(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfCLHSMPublicKeyOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_vector4(::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfCLHSMPublicKeyOfCLHSMqk>>::cast_into(x).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::pop_back()```</span>.
    pub unsafe fn pop_back(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_pop_back(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::push_back(const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& __x)```</span>.
    pub unsafe fn push_back(
        &mut self,
        x: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_push_back(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>>::cast_into(x).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::reserve(size_t __n)```</span>.
    pub unsafe fn reserve(&mut self, n: usize) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_reserve(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk, n)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::resize(size_t __new_size)```</span>.
    pub unsafe fn resize_1a(&mut self, new_size: usize) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_resize(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk, new_size)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::resize(size_t __new_size, const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>& __x)```</span>.
    pub unsafe fn resize_2a(
        &mut self,
        new_size: usize,
        x: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_resize1(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk, new_size, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>>::cast_into(x).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::shrink_to_fit()```</span>.
    pub unsafe fn shrink_to_fit(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_shrink_to_fit(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::size() const```</span>.
    pub unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_size(self as *const crate::VectorOfCLHSMPublicKeyOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::swap(std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>& __x)```</span>.
    pub unsafe fn swap(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::MutRef<crate::VectorOfCLHSMPublicKeyOfCLHSMqk>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_swap(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::MutRef<crate::VectorOfCLHSMPublicKeyOfCLHSMqk>>::cast_into(x).as_mut_raw_ptr())
    }
}

/// C++ class: <span style='color: green;'>```std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>```</span>.
#[repr(C)]
pub struct VectorOfCLHSMClearTextOfCLHSMqk {
    _unused: u8,
}
impl VectorOfCLHSMClearTextOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::assign(size_t __n, const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& __val)```</span>.
    pub unsafe fn assign_usize_c_l_h_s_m_clear_text_of_c_l_h_s_mqk(
        &mut self,
        n: usize,
        val: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_assign(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk, n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>>::cast_into(val).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::assign(const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>* first, const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>* last)```</span>.
    pub unsafe fn assign_2_c_l_h_s_m_clear_text_of_c_l_h_s_mqk(
        &mut self,
        first: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>,
        >,
        last: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_assign1(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>>::cast_into(last).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::at(size_t __n)```</span>.
    pub unsafe fn at_mut(
        &mut self,
        n: usize,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_at(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk, n);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::at(size_t __n) const```</span>.
    pub unsafe fn at(
        &self,
        n: usize,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_at1(self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk, n);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::back()```</span>.
    pub unsafe fn back_mut(
        &mut self,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_back(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::back() const```</span>.
    pub unsafe fn back(
        &self,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_back1(self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::capacity() const```</span>.
    pub unsafe fn capacity(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_capacity(self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::clear()```</span>.
    pub unsafe fn clear(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_clear(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::operator=(const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __x)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>>,
    ) -> ::cpp_core::MutRef<crate::VectorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_operator_(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>>::cast_into(x).as_raw_ptr());
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::data()```</span>.
    pub unsafe fn data_mut(
        &mut self,
    ) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_data(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk);
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::data() const```</span>.
    pub unsafe fn data(
        &self,
    ) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_data1(self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk);
        ::cpp_core::Ptr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```bool std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::empty() const```</span>.
    pub unsafe fn empty(&self) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_empty(self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::front()```</span>.
    pub unsafe fn front_mut(
        &mut self,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_front(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::front() const```</span>.
    pub unsafe fn front(
        &self,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_front1(self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::operator[](size_t __n)```</span>.
    pub unsafe fn index_mut(
        &mut self,
        n: usize,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_operator__(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk, n);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::operator[](size_t __n) const```</span>.
    pub unsafe fn index(
        &self,
        n: usize,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_operator__1(self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk, n);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::max_size() const```</span>.
    pub unsafe fn max_size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_max_size(self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::vector()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::VectorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_vector();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::vector(const std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>& __a)```</span>.
    pub unsafe fn from_allocator_of_c_l_h_s_m_clear_text_of_c_l_h_s_mqk(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_vector1(::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::vector(size_t __n, const std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>& __a = …)```</span>.
    pub unsafe fn from_usize_allocator_of_c_l_h_s_m_clear_text_of_c_l_h_s_mqk(
        n: usize,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_vector2(n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::vector(size_t __n, const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& __value, const std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>& __a = …)```</span>.
    pub unsafe fn from_usize_c_l_h_s_m_clear_text_of_c_l_h_s_mqk_allocator_of_c_l_h_s_m_clear_text_of_c_l_h_s_mqk(
        n: usize,
        value: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>,
        >,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_vector3(n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>>::cast_into(value).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::vector(const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __x, const std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>& __a)```</span>.
    pub unsafe fn from_vector_of_c_l_h_s_m_clear_text_of_c_l_h_s_mqk_allocator_of_c_l_h_s_m_clear_text_of_c_l_h_s_mqk(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>>,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_vector6(::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>>::cast_into(x).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::vector(const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>* first, const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>* last, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>> alloc = …)```</span>.
    pub unsafe fn from_2_c_l_h_s_m_clear_text_of_c_l_h_s_mqk_allocator_of_c_l_h_s_m_clear_text_of_c_l_h_s_mqk(
        first: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>,
        >,
        last: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>,
        >,
        alloc: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_vector8(::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>>::cast_into(last).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>::cast_into(alloc).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::vector(size_t __n)```</span>.
    pub unsafe fn from_usize(
        n: usize,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_vector9(n);
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::vector(size_t __n, const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& __value)```</span>.
    pub unsafe fn from_usize_c_l_h_s_m_clear_text_of_c_l_h_s_mqk(
        n: usize,
        value: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>,
        >,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_vector10(n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>>::cast_into(value).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::vector(const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>* first, const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>* last)```</span>.
    pub unsafe fn from_2_c_l_h_s_m_clear_text_of_c_l_h_s_mqk(
        first: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>,
        >,
        last: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>,
        >,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_vector11(::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>>::cast_into(last).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::vector(const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __x)```</span>.
    pub unsafe fn new_copy(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_vector4(::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>>::cast_into(x).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::pop_back()```</span>.
    pub unsafe fn pop_back(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_pop_back(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::push_back(const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& __x)```</span>.
    pub unsafe fn push_back(
        &mut self,
        x: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_push_back(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>>::cast_into(x).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::reserve(size_t __n)```</span>.
    pub unsafe fn reserve(&mut self, n: usize) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_reserve(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk, n)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::resize(size_t __new_size)```</span>.
    pub unsafe fn resize_1a(&mut self, new_size: usize) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_resize(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk, new_size)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::resize(size_t __new_size, const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>& __x)```</span>.
    pub unsafe fn resize_2a(
        &mut self,
        new_size: usize,
        x: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_resize1(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk, new_size, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>>::cast_into(x).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::shrink_to_fit()```</span>.
    pub unsafe fn shrink_to_fit(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_shrink_to_fit(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::size() const```</span>.
    pub unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_size(self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::swap(std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __x)```</span>.
    pub unsafe fn swap(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::MutRef<crate::VectorOfCLHSMClearTextOfCLHSMqk>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_swap(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::MutRef<crate::VectorOfCLHSMClearTextOfCLHSMqk>>::cast_into(x).as_mut_raw_ptr())
    }
}

/// C++ class: <span style='color: green;'>```std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>```</span>.
#[repr(C)]
pub struct VectorOfCLHSMCipherTextOfCLHSMqk {
    _unused: u8,
}
impl VectorOfCLHSMCipherTextOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::assign(size_t __n, const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& __val)```</span>.
    pub unsafe fn assign_usize_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk(
        &mut self,
        n: usize,
        val: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_assign(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk, n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>>::cast_into(val).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::assign(const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>* first, const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>* last)```</span>.
    pub unsafe fn assign_2_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk(
        &mut self,
        first: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>,
        >,
        last: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_assign1(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>>::cast_into(last).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::at(size_t __n)```</span>.
    pub unsafe fn at_mut(
        &mut self,
        n: usize,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_at(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk, n);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::at(size_t __n) const```</span>.
    pub unsafe fn at(
        &self,
        n: usize,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_at1(self as *const crate::VectorOfCLHSMCipherTextOfCLHSMqk, n);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::back()```</span>.
    pub unsafe fn back_mut(
        &mut self,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_back(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::back() const```</span>.
    pub unsafe fn back(
        &self,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_back1(self as *const crate::VectorOfCLHSMCipherTextOfCLHSMqk);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::capacity() const```</span>.
    pub unsafe fn capacity(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_capacity(self as *const crate::VectorOfCLHSMCipherTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::clear()```</span>.
    pub unsafe fn clear(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_clear(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>& std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::operator=(const std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>& __x)```</span>.
    pub unsafe fn copy_from(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfCLHSMCipherTextOfCLHSMqk>>,
    ) -> ::cpp_core::MutRef<crate::VectorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_operator_(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfCLHSMCipherTextOfCLHSMqk>>::cast_into(x).as_raw_ptr());
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::data()```</span>.
    pub unsafe fn data_mut(
        &mut self,
    ) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_data(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk);
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::data() const```</span>.
    pub unsafe fn data(
        &self,
    ) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_data1(self as *const crate::VectorOfCLHSMCipherTextOfCLHSMqk);
        ::cpp_core::Ptr::from_raw(ffi_result)
    }

    /// Calls C++ function: <span style='color: green;'>```bool std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::empty() const```</span>.
    pub unsafe fn empty(&self) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_empty(self as *const crate::VectorOfCLHSMCipherTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::front()```</span>.
    pub unsafe fn front_mut(
        &mut self,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_front(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::front() const```</span>.
    pub unsafe fn front(
        &self,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_front1(self as *const crate::VectorOfCLHSMCipherTextOfCLHSMqk);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::operator[](size_t __n)```</span>.
    pub unsafe fn index_mut(
        &mut self,
        n: usize,
    ) -> ::cpp_core::MutRef<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_operator__(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk, n);
        ::cpp_core::MutRef::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::operator[](size_t __n) const```</span>.
    pub unsafe fn index(
        &self,
        n: usize,
    ) -> ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_operator__1(self as *const crate::VectorOfCLHSMCipherTextOfCLHSMqk, n);
        ::cpp_core::Ref::from_raw(ffi_result).expect("attempted to construct a null Ref")
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::max_size() const```</span>.
    pub unsafe fn max_size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_max_size(self as *const crate::VectorOfCLHSMCipherTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::vector()```</span>.
    pub unsafe fn new() -> ::cpp_core::CppBox<crate::VectorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_vector();
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::vector(const std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>& __a)```</span>.
    pub unsafe fn from_allocator_of_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk(
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_vector1(::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::vector(size_t __n, const std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>& __a = …)```</span>.
    pub unsafe fn from_usize_allocator_of_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk(
        n: usize,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_vector2(n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::vector(size_t __n, const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& __value, const std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>& __a = …)```</span>.
    pub unsafe fn from_usize_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk_allocator_of_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk(
        n: usize,
        value: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>,
        >,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_vector3(n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>>::cast_into(value).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::vector(const std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>& __x, const std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>& __a)```</span>.
    pub unsafe fn from_vector_of_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk_allocator_of_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfCLHSMCipherTextOfCLHSMqk>>,
        a: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_vector6(::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfCLHSMCipherTextOfCLHSMqk>>::cast_into(x).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>::cast_into(a).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::vector(const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>* first, const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>* last, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>> alloc = …)```</span>.
    pub unsafe fn from_2_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk_allocator_of_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk(
        first: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>,
        >,
        last: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>,
        >,
        alloc: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_vector8(::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>>::cast_into(last).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>::cast_into(alloc).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::vector(size_t __n)```</span>.
    pub unsafe fn from_usize(
        n: usize,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_vector9(n);
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::vector(size_t __n, const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& __value)```</span>.
    pub unsafe fn from_usize_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk(
        n: usize,
        value: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>,
        >,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_vector10(n, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>>::cast_into(value).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::vector(const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>* first, const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>* last)```</span>.
    pub unsafe fn from_2_c_l_h_s_m_cipher_text_of_c_l_h_s_mqk(
        first: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>,
        >,
        last: impl ::cpp_core::CastInto<
            ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>,
        >,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_vector11(::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>>::cast_into(first).as_raw_ptr(), ::cpp_core::CastInto::<::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>>::cast_into(last).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```[constructor] void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::vector(const std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>& __x)```</span>.
    pub unsafe fn new_copy(
        x: impl ::cpp_core::CastInto<::cpp_core::Ref<crate::VectorOfCLHSMCipherTextOfCLHSMqk>>,
    ) -> ::cpp_core::CppBox<crate::VectorOfCLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_vector4(::cpp_core::CastInto::<::cpp_core::Ref<crate::VectorOfCLHSMCipherTextOfCLHSMqk>>::cast_into(x).as_raw_ptr());
        ::cpp_core::CppBox::from_raw(ffi_result).expect("attempted to construct a null CppBox")
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::pop_back()```</span>.
    pub unsafe fn pop_back(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_pop_back(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::push_back(const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& __x)```</span>.
    pub unsafe fn push_back(
        &mut self,
        x: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_push_back(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>>::cast_into(x).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::reserve(size_t __n)```</span>.
    pub unsafe fn reserve(&mut self, n: usize) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_reserve(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk, n)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::resize(size_t __new_size)```</span>.
    pub unsafe fn resize_1a(&mut self, new_size: usize) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_resize(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk, new_size)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::resize(size_t __new_size, const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>& __x)```</span>.
    pub unsafe fn resize_2a(
        &mut self,
        new_size: usize,
        x: impl ::cpp_core::CastInto<
            ::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>,
        >,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_resize1(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk, new_size, ::cpp_core::CastInto::<::cpp_core::Ref<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>>::cast_into(x).as_raw_ptr())
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::shrink_to_fit()```</span>.
    pub unsafe fn shrink_to_fit(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_shrink_to_fit(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::size() const```</span>.
    pub unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_size(self as *const crate::VectorOfCLHSMCipherTextOfCLHSMqk)
    }

    /// Calls C++ function: <span style='color: green;'>```void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::swap(std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>& __x)```</span>.
    pub unsafe fn swap(
        &mut self,
        x: impl ::cpp_core::CastInto<::cpp_core::MutRef<crate::VectorOfCLHSMCipherTextOfCLHSMqk>>,
    ) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_swap(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk, ::cpp_core::CastInto::<::cpp_core::MutRef<crate::VectorOfCLHSMCipherTextOfCLHSMqk>>::cast_into(x).as_mut_raw_ptr())
    }
}

impl ::cpp_core::CppDeletable for crate::AllocatorOfQFI {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::allocator<BICYCL::QFI>::~allocator()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_QFI_dallocator(
            self as *mut crate::AllocatorOfQFI,
        )
    }
}

impl ::cpp_core::CppDeletable for crate::AllocatorOfMpz {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::allocator<BICYCL::Mpz>::~allocator()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_Mpz_dallocator(
            self as *mut crate::AllocatorOfMpz,
        )
    }
}

impl ::cpp_core::CppDeletable for crate::AllocatorOfSecLevel {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::allocator<BICYCL::SecLevel>::~allocator()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL_SecLevel_dallocator(
            self as *mut crate::AllocatorOfSecLevel,
        )
    }
}

impl ::cpp_core::CppDeletable for crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>::~allocator()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_dallocator(self as *mut crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk)
    }
}

impl ::cpp_core::CppDeletable for crate::AllocatorOfCLHSMClearTextOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>::~allocator()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_dallocator(self as *mut crate::AllocatorOfCLHSMClearTextOfCLHSMqk)
    }
}

impl ::cpp_core::CppDeletable for crate::AllocatorOfCLHSMCipherTextOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>::~allocator()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_dallocator(self as *mut crate::AllocatorOfCLHSMCipherTextOfCLHSMqk)
    }
}

impl ::std::cmp::PartialEq<::cpp_core::Ref<crate::AllocatorOfQFI>> for crate::AllocatorOfQFI {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator==(const std::allocator<BICYCL::QFI>& arg1, const std::allocator<BICYCL::QFI>& arg2)```</span>.
    fn eq(&self, arg2: &::cpp_core::Ref<crate::AllocatorOfQFI>) -> bool {
        unsafe {
            crate::__ffi::ctr_bicycl_ffi_std_operator__(
                self as *const crate::AllocatorOfQFI,
                arg2.as_raw_ptr(),
            )
        }
    }
}

impl ::std::cmp::PartialEq<::cpp_core::Ref<crate::AllocatorOfMpz>> for crate::AllocatorOfMpz {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator==(const std::allocator<BICYCL::Mpz>& arg1, const std::allocator<BICYCL::Mpz>& arg2)```</span>.
    fn eq(&self, arg2: &::cpp_core::Ref<crate::AllocatorOfMpz>) -> bool {
        unsafe {
            crate::__ffi::ctr_bicycl_ffi_std_operator__1(
                self as *const crate::AllocatorOfMpz,
                arg2.as_raw_ptr(),
            )
        }
    }
}

impl ::std::cmp::PartialEq<::cpp_core::Ref<crate::AllocatorOfSecLevel>>
    for crate::AllocatorOfSecLevel
{
    /// Calls C++ function: <span style='color: green;'>```bool std::operator==(const std::allocator<BICYCL::SecLevel>& arg1, const std::allocator<BICYCL::SecLevel>& arg2)```</span>.
    fn eq(&self, arg2: &::cpp_core::Ref<crate::AllocatorOfSecLevel>) -> bool {
        unsafe {
            crate::__ffi::ctr_bicycl_ffi_std_operator__2(
                self as *const crate::AllocatorOfSecLevel,
                arg2.as_raw_ptr(),
            )
        }
    }
}

impl ::std::cmp::PartialEq<::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>>
    for crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk
{
    /// Calls C++ function: <span style='color: green;'>```bool std::operator==(const std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>& arg1, const std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>& arg2)```</span>.
    fn eq(&self, arg2: &::cpp_core::Ref<crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk>) -> bool {
        unsafe {
            crate::__ffi::ctr_bicycl_ffi_std_operator__3(
                self as *const crate::AllocatorOfCLHSMPublicKeyOfCLHSMqk,
                arg2.as_raw_ptr(),
            )
        }
    }
}

impl ::std::cmp::PartialEq<::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>>
    for crate::AllocatorOfCLHSMClearTextOfCLHSMqk
{
    /// Calls C++ function: <span style='color: green;'>```bool std::operator==(const std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>& arg1, const std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>& arg2)```</span>.
    fn eq(&self, arg2: &::cpp_core::Ref<crate::AllocatorOfCLHSMClearTextOfCLHSMqk>) -> bool {
        unsafe {
            crate::__ffi::ctr_bicycl_ffi_std_operator__4(
                self as *const crate::AllocatorOfCLHSMClearTextOfCLHSMqk,
                arg2.as_raw_ptr(),
            )
        }
    }
}

impl ::std::cmp::PartialEq<::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>>
    for crate::AllocatorOfCLHSMCipherTextOfCLHSMqk
{
    /// Calls C++ function: <span style='color: green;'>```bool std::operator==(const std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>& arg1, const std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>& arg2)```</span>.
    fn eq(&self, arg2: &::cpp_core::Ref<crate::AllocatorOfCLHSMCipherTextOfCLHSMqk>) -> bool {
        unsafe {
            crate::__ffi::ctr_bicycl_ffi_std_operator__5(
                self as *const crate::AllocatorOfCLHSMCipherTextOfCLHSMqk,
                arg2.as_raw_ptr(),
            )
        }
    }
}

impl ::cpp_core::CppDeletable for crate::VectorOfQFI {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::~vector()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_dvector(
            self as *mut crate::VectorOfQFI,
        )
    }
}

impl ::cpp_core::CppDeletable for crate::VectorOfMpz {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::~vector()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_dvector(
            self as *mut crate::VectorOfMpz,
        )
    }
}

impl ::cpp_core::CppDeletable for crate::VectorOfSecLevel {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::~vector()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_dvector(self as *mut crate::VectorOfSecLevel)
    }
}

impl ::cpp_core::CppDeletable for crate::VectorOfCLHSMPublicKeyOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::~vector()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_dvector(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk)
    }
}

impl ::cpp_core::CppDeletable for crate::VectorOfCLHSMClearTextOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::~vector()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_dvector(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk)
    }
}

impl ::cpp_core::CppDeletable for crate::VectorOfCLHSMCipherTextOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```[destructor] void std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::~vector()```</span>.
    unsafe fn delete(&mut self) {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_dvector(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk)
    }
}

impl ::cpp_core::vector_ops::Size for crate::VectorOfQFI {
    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::size() const```</span>.
    unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_size(
            self as *const crate::VectorOfQFI,
        )
    }
}

impl ::cpp_core::vector_ops::Size for crate::VectorOfMpz {
    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::size() const```</span>.
    unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_size(
            self as *const crate::VectorOfMpz,
        )
    }
}

impl ::cpp_core::vector_ops::Size for crate::VectorOfSecLevel {
    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::size() const```</span>.
    unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_size(
            self as *const crate::VectorOfSecLevel,
        )
    }
}

impl ::cpp_core::vector_ops::Size for crate::VectorOfCLHSMPublicKeyOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::size() const```</span>.
    unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_size(self as *const crate::VectorOfCLHSMPublicKeyOfCLHSMqk)
    }
}

impl ::cpp_core::vector_ops::Size for crate::VectorOfCLHSMClearTextOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::size() const```</span>.
    unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_size(self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk)
    }
}

impl ::cpp_core::vector_ops::Size for crate::VectorOfCLHSMCipherTextOfCLHSMqk {
    /// Calls C++ function: <span style='color: green;'>```size_t std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::size() const```</span>.
    unsafe fn size(&self) -> usize {
        crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_size(self as *const crate::VectorOfCLHSMCipherTextOfCLHSMqk)
    }
}

impl ::cpp_core::vector_ops::DataMut for crate::VectorOfQFI {
    type Output = ::cpp_core::MutPtr<crate::b_i_c_y_c_l::QFI>;
    /// Calls C++ function: <span style='color: green;'>```BICYCL::QFI* std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::data()```</span>.
    unsafe fn data_mut(&mut self) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_data(
                self as *mut crate::VectorOfQFI,
            );
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }
}

impl ::cpp_core::vector_ops::DataMut for crate::VectorOfMpz {
    type Output = ::cpp_core::MutPtr<crate::b_i_c_y_c_l::Mpz>;
    /// Calls C++ function: <span style='color: green;'>```BICYCL::Mpz* std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::data()```</span>.
    unsafe fn data_mut(&mut self) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_data(
                self as *mut crate::VectorOfMpz,
            );
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }
}

impl ::cpp_core::vector_ops::DataMut for crate::VectorOfSecLevel {
    type Output = ::cpp_core::MutPtr<crate::b_i_c_y_c_l::SecLevel>;
    /// Calls C++ function: <span style='color: green;'>```BICYCL::SecLevel* std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::data()```</span>.
    unsafe fn data_mut(&mut self) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_data(self as *mut crate::VectorOfSecLevel);
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }
}

impl ::cpp_core::vector_ops::DataMut for crate::VectorOfCLHSMPublicKeyOfCLHSMqk {
    type Output = ::cpp_core::MutPtr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>;
    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::data()```</span>.
    unsafe fn data_mut(
        &mut self,
    ) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_data(self as *mut crate::VectorOfCLHSMPublicKeyOfCLHSMqk);
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }
}

impl ::cpp_core::vector_ops::DataMut for crate::VectorOfCLHSMClearTextOfCLHSMqk {
    type Output = ::cpp_core::MutPtr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>;
    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::data()```</span>.
    unsafe fn data_mut(
        &mut self,
    ) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_data(self as *mut crate::VectorOfCLHSMClearTextOfCLHSMqk);
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }
}

impl ::cpp_core::vector_ops::DataMut for crate::VectorOfCLHSMCipherTextOfCLHSMqk {
    type Output = ::cpp_core::MutPtr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>;
    /// Calls C++ function: <span style='color: green;'>```BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::data()```</span>.
    unsafe fn data_mut(
        &mut self,
    ) -> ::cpp_core::MutPtr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_data(self as *mut crate::VectorOfCLHSMCipherTextOfCLHSMqk);
        ::cpp_core::MutPtr::from_raw(ffi_result)
    }
}

impl ::cpp_core::vector_ops::Data for crate::VectorOfQFI {
    type Output = ::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI>;
    /// Calls C++ function: <span style='color: green;'>```const BICYCL::QFI* std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>::data() const```</span>.
    unsafe fn data(&self) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::QFI> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_QFI_std_allocator_BICYCL_QFI_data1(
                self as *const crate::VectorOfQFI,
            );
        ::cpp_core::Ptr::from_raw(ffi_result)
    }
}

impl ::cpp_core::vector_ops::Data for crate::VectorOfMpz {
    type Output = ::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz>;
    /// Calls C++ function: <span style='color: green;'>```const BICYCL::Mpz* std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>::data() const```</span>.
    unsafe fn data(&self) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::Mpz> {
        let ffi_result =
            crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_Mpz_std_allocator_BICYCL_Mpz_data1(
                self as *const crate::VectorOfMpz,
            );
        ::cpp_core::Ptr::from_raw(ffi_result)
    }
}

impl ::cpp_core::vector_ops::Data for crate::VectorOfSecLevel {
    type Output = ::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel>;
    /// Calls C++ function: <span style='color: green;'>```const BICYCL::SecLevel* std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>::data() const```</span>.
    unsafe fn data(&self) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::SecLevel> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL_SecLevel_std_allocator_BICYCL_SecLevel_data1(self as *const crate::VectorOfSecLevel);
        ::cpp_core::Ptr::from_raw(ffi_result)
    }
}

impl ::cpp_core::vector_ops::Data for crate::VectorOfCLHSMPublicKeyOfCLHSMqk {
    type Output = ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk>;
    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_PublicKey<BICYCL::CL_HSMqk>>>::data() const```</span>.
    unsafe fn data(&self) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMPublicKeyOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_PublicKey_BICYCL_CL_HSMqk_data1(self as *const crate::VectorOfCLHSMPublicKeyOfCLHSMqk);
        ::cpp_core::Ptr::from_raw(ffi_result)
    }
}

impl ::cpp_core::vector_ops::Data for crate::VectorOfCLHSMClearTextOfCLHSMqk {
    type Output = ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk>;
    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>::data() const```</span>.
    unsafe fn data(&self) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMClearTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_ClearText_BICYCL_CL_HSMqk_data1(self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk);
        ::cpp_core::Ptr::from_raw(ffi_result)
    }
}

impl ::cpp_core::vector_ops::Data for crate::VectorOfCLHSMCipherTextOfCLHSMqk {
    type Output = ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk>;
    /// Calls C++ function: <span style='color: green;'>```const BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>* std::vector<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_CipherText<BICYCL::CL_HSMqk>>>::data() const```</span>.
    unsafe fn data(&self) -> ::cpp_core::Ptr<crate::b_i_c_y_c_l::utils::CLHSMCipherTextOfCLHSMqk> {
        let ffi_result = crate::__ffi::ctr_bicycl_ffi_std_vector_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_std_allocator_BICYCL__Utils_CL_HSM_CipherText_BICYCL_CL_HSMqk_data1(self as *const crate::VectorOfCLHSMCipherTextOfCLHSMqk);
        ::cpp_core::Ptr::from_raw(ffi_result)
    }
}

impl ::std::cmp::PartialEq<::cpp_core::Ref<crate::VectorOfQFI>> for crate::VectorOfQFI {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator==(const std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>& __x, const std::vector<BICYCL::QFI, std::allocator<BICYCL::QFI>>& __y)```</span>.
    fn eq(&self, y: &::cpp_core::Ref<crate::VectorOfQFI>) -> bool {
        unsafe {
            crate::__ffi::ctr_bicycl_ffi_std_operator__12(
                self as *const crate::VectorOfQFI,
                y.as_raw_ptr(),
            )
        }
    }
}

impl ::std::cmp::PartialEq<::cpp_core::Ref<crate::VectorOfMpz>> for crate::VectorOfMpz {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator==(const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __x, const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __y)```</span>.
    fn eq(&self, y: &::cpp_core::Ref<crate::VectorOfMpz>) -> bool {
        unsafe {
            crate::__ffi::ctr_bicycl_ffi_std_operator__13(
                self as *const crate::VectorOfMpz,
                y.as_raw_ptr(),
            )
        }
    }
}

impl ::std::cmp::PartialEq<::cpp_core::Ref<crate::VectorOfSecLevel>> for crate::VectorOfSecLevel {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator==(const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __x, const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __y)```</span>.
    fn eq(&self, y: &::cpp_core::Ref<crate::VectorOfSecLevel>) -> bool {
        unsafe {
            crate::__ffi::ctr_bicycl_ffi_std_operator__14(
                self as *const crate::VectorOfSecLevel,
                y.as_raw_ptr(),
            )
        }
    }
}

impl ::std::cmp::PartialEq<::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>>
    for crate::VectorOfCLHSMClearTextOfCLHSMqk
{
    /// Calls C++ function: <span style='color: green;'>```bool std::operator==(const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __x, const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __y)```</span>.
    fn eq(&self, y: &::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>) -> bool {
        unsafe {
            crate::__ffi::ctr_bicycl_ffi_std_operator__16(
                self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk,
                y.as_raw_ptr(),
            )
        }
    }
}

impl ::cpp_core::cmp::Lt<::cpp_core::Ref<crate::VectorOfMpz>> for crate::VectorOfMpz {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator<(const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __x, const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __y)```</span>.
    unsafe fn lt(&self, y: &::cpp_core::Ref<crate::VectorOfMpz>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator_1(
            self as *const crate::VectorOfMpz,
            y.as_raw_ptr(),
        )
    }
}

impl ::cpp_core::cmp::Lt<::cpp_core::Ref<crate::VectorOfSecLevel>> for crate::VectorOfSecLevel {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator<(const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __x, const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __y)```</span>.
    unsafe fn lt(&self, y: &::cpp_core::Ref<crate::VectorOfSecLevel>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator_2(
            self as *const crate::VectorOfSecLevel,
            y.as_raw_ptr(),
        )
    }
}

impl ::cpp_core::cmp::Lt<::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>>
    for crate::VectorOfCLHSMClearTextOfCLHSMqk
{
    /// Calls C++ function: <span style='color: green;'>```bool std::operator<(const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __x, const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __y)```</span>.
    unsafe fn lt(&self, y: &::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator_4(
            self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk,
            y.as_raw_ptr(),
        )
    }
}

impl ::cpp_core::cmp::Gt<::cpp_core::Ref<crate::VectorOfMpz>> for crate::VectorOfMpz {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator>(const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __x, const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __y)```</span>.
    unsafe fn gt(&self, y: &::cpp_core::Ref<crate::VectorOfMpz>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator_7(
            self as *const crate::VectorOfMpz,
            y.as_raw_ptr(),
        )
    }
}

impl ::cpp_core::cmp::Gt<::cpp_core::Ref<crate::VectorOfSecLevel>> for crate::VectorOfSecLevel {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator>(const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __x, const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __y)```</span>.
    unsafe fn gt(&self, y: &::cpp_core::Ref<crate::VectorOfSecLevel>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator_8(
            self as *const crate::VectorOfSecLevel,
            y.as_raw_ptr(),
        )
    }
}

impl ::cpp_core::cmp::Gt<::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>>
    for crate::VectorOfCLHSMClearTextOfCLHSMqk
{
    /// Calls C++ function: <span style='color: green;'>```bool std::operator>(const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __x, const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __y)```</span>.
    unsafe fn gt(&self, y: &::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator_10(
            self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk,
            y.as_raw_ptr(),
        )
    }
}

impl ::cpp_core::cmp::Le<::cpp_core::Ref<crate::VectorOfMpz>> for crate::VectorOfMpz {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator<=(const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __x, const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __y)```</span>.
    unsafe fn le(&self, y: &::cpp_core::Ref<crate::VectorOfMpz>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator__25(
            self as *const crate::VectorOfMpz,
            y.as_raw_ptr(),
        )
    }
}

impl ::cpp_core::cmp::Le<::cpp_core::Ref<crate::VectorOfSecLevel>> for crate::VectorOfSecLevel {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator<=(const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __x, const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __y)```</span>.
    unsafe fn le(&self, y: &::cpp_core::Ref<crate::VectorOfSecLevel>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator__26(
            self as *const crate::VectorOfSecLevel,
            y.as_raw_ptr(),
        )
    }
}

impl ::cpp_core::cmp::Le<::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>>
    for crate::VectorOfCLHSMClearTextOfCLHSMqk
{
    /// Calls C++ function: <span style='color: green;'>```bool std::operator<=(const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __x, const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __y)```</span>.
    unsafe fn le(&self, y: &::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator__28(
            self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk,
            y.as_raw_ptr(),
        )
    }
}

impl ::cpp_core::cmp::Ge<::cpp_core::Ref<crate::VectorOfMpz>> for crate::VectorOfMpz {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator>=(const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __x, const std::vector<BICYCL::Mpz, std::allocator<BICYCL::Mpz>>& __y)```</span>.
    unsafe fn ge(&self, y: &::cpp_core::Ref<crate::VectorOfMpz>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator__31(
            self as *const crate::VectorOfMpz,
            y.as_raw_ptr(),
        )
    }
}

impl ::cpp_core::cmp::Ge<::cpp_core::Ref<crate::VectorOfSecLevel>> for crate::VectorOfSecLevel {
    /// Calls C++ function: <span style='color: green;'>```bool std::operator>=(const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __x, const std::vector<BICYCL::SecLevel, std::allocator<BICYCL::SecLevel>>& __y)```</span>.
    unsafe fn ge(&self, y: &::cpp_core::Ref<crate::VectorOfSecLevel>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator__32(
            self as *const crate::VectorOfSecLevel,
            y.as_raw_ptr(),
        )
    }
}

impl ::cpp_core::cmp::Ge<::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>>
    for crate::VectorOfCLHSMClearTextOfCLHSMqk
{
    /// Calls C++ function: <span style='color: green;'>```bool std::operator>=(const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __x, const std::vector<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>, std::allocator<BICYCL::_Utils::CL_HSM_ClearText<BICYCL::CL_HSMqk>>>& __y)```</span>.
    unsafe fn ge(&self, y: &::cpp_core::Ref<crate::VectorOfCLHSMClearTextOfCLHSMqk>) -> bool {
        crate::__ffi::ctr_bicycl_ffi_std_operator__34(
            self as *const crate::VectorOfCLHSMClearTextOfCLHSMqk,
            y.as_raw_ptr(),
        )
    }
}


pub struct MpzBox(pub cpp_core::CppBox<Mpz>);
pub struct QFIBox(pub cpp_core::CppBox<QFI>);
pub struct CiphertextBox(pub cpp_core::CppBox<CLHSMCipherTextOfCLHSMqk>);
pub struct SecretKeyBox(pub cpp_core::CppBox<CLHSMSecretKeyOfCLHSMqk>);
pub struct PublicKeyBox(pub cpp_core::CppBox<CLHSMPublicKeyOfCLHSMqk>);

unsafe impl Send for MpzBox {}
unsafe impl Send for QFIBox {}
unsafe impl Send for CiphertextBox {}
unsafe impl Send for SecretKeyBox {}
unsafe impl Send for PublicKeyBox {}

impl Clone for MpzBox {
    fn clone(&self) -> Self {
        let ref_self_mpz: cpp_core::Ref<Mpz> = unsafe{cpp_core::Ref::from_raw_ref( &self.0)};
        let new_mpz = unsafe{Mpz::new_copy(ref_self_mpz)};
        MpzBox(new_mpz)

    }
}

impl MpzBox{
    pub unsafe fn to_bytes(&self) -> Vec<u8> {
        let mut mpz_vec = VectorOfUchar::new();
        let mutref_vec: cpp_core::MutRef<VectorOfUchar> = cpp_core::MutRef::from_raw_ref( &mut mpz_vec);
        self.0.mpz_to_vector(mutref_vec);
        let mpz_vec = cpp_vec_to_rust(&mutref_vec.deref());

        [
            &((mpz_vec.len() as u32).to_le_bytes()[..]),
            &mpz_vec[..],
        ]
            .concat()
    }

    pub unsafe fn from_bytes(bytes: &[u8]) -> Option<MpzBox> {
        let mut cursor = std::io::Cursor::new(bytes);
        let mut mpz_bytes = Vec::new();

        let mut size_bytes = [0u8; 4];
        cursor.read_exact(&mut size_bytes).ok()?;
        let mpz_size = u32::from_le_bytes(size_bytes);
        cursor.take(mpz_size as u64).read_to_end(&mut mpz_bytes).ok()?;

        let cpp_bytes = rust_vec_to_cpp(mpz_bytes);
        let ref_cpp_bytes: cpp_core::Ref<VectorOfUchar> = cpp_core::Ref::from_raw_ref( &cpp_bytes);

        let mpz_val = Mpz::from_vector_of_uchar(ref_cpp_bytes);
        Some(MpzBox(mpz_val))
    }
}


impl Clone for QFIBox {
    fn clone(&self) -> Self {
        let ref_self_qfi: cpp_core::Ref<QFI> = unsafe{cpp_core::Ref::from_raw_ref( &self.0)};
        let new_qfi = unsafe{QFI::new_copy(ref_self_qfi)};
        QFIBox(new_qfi)
    }
}

impl QFIBox{

    pub unsafe  fn to_bytes(&self) -> Vec<u8> {
        let qfi_comp = self.0.compressed_repr();

        let ffi_ap = __ffi::ctr_bicycl_ffi_BICYCL_Mpz_Mpz1(
            cpp_core::CastInto::<cpp_core::Ref<b_i_c_y_c_l::Mpz>>::cast_into(qfi_comp.ap())
                .as_raw_ptr(),
        );
        let ap_cppbox = cpp_core::CppBox::from_raw(ffi_ap).expect("attempted to construct a null CppBox");

        let ffi_g = __ffi::ctr_bicycl_ffi_BICYCL_Mpz_Mpz1(
            cpp_core::CastInto::<cpp_core::Ref<b_i_c_y_c_l::Mpz>>::cast_into(qfi_comp.g())
                .as_raw_ptr(),
        );
        let g_cppbox = cpp_core::CppBox::from_raw(ffi_g).expect("attempted to construct a null CppBox");

        let ffi_tp = __ffi::ctr_bicycl_ffi_BICYCL_Mpz_Mpz1(
            cpp_core::CastInto::<cpp_core::Ref<b_i_c_y_c_l::Mpz>>::cast_into(qfi_comp.tp())
                .as_raw_ptr(),
        );
        let tp_cppbox = cpp_core::CppBox::from_raw(ffi_tp).expect("attempted to construct a null CppBox");

        let ffi_b0 = __ffi::ctr_bicycl_ffi_BICYCL_Mpz_Mpz1(
            cpp_core::CastInto::<cpp_core::Ref<b_i_c_y_c_l::Mpz>>::cast_into(qfi_comp.b0())
                .as_raw_ptr(),
        );
        let b0_cppbox = cpp_core::CppBox::from_raw(ffi_b0).expect("attempted to construct a null CppBox");

        let ap_bytes = MpzBox(ap_cppbox).to_bytes();
        let g_bytes = MpzBox(g_cppbox).to_bytes();
        let tp_bytes = MpzBox(tp_cppbox).to_bytes();
        let b0_bytes = MpzBox(b0_cppbox).to_bytes();
        let mut neg = 0u8;
        if qfi_comp.is_neg() == true{
            neg = 1u8;
        }

        [
            &((ap_bytes.len() as u32).to_le_bytes()[..]),
            &ap_bytes[..],

            &((g_bytes.len() as u32).to_le_bytes()[..]),
            &g_bytes[..],

            &((tp_bytes.len() as u32).to_le_bytes()[..]),
            &tp_bytes[..],

            &((b0_bytes.len() as u32).to_le_bytes()[..]),
            &b0_bytes[..],

            &[neg],
        ]
            .concat()
    }

    pub unsafe fn from_bytes(bytes: &[u8], c: &cpp_core::CppBox<CLHSMqk>) -> Option<QFIBox> {
        let mut cursor = std::io::Cursor::new(bytes); // Clone the byte slice
        let mut ap_bytes = Vec::new();
        let mut g_bytes = Vec::new();
        let mut tp_bytes = Vec::new();
        let mut b0_bytes = Vec::new();
        let mut size_bytes = [0u8; 4];
        let mut is_neg = [0u8; 1];

        cursor.read_exact(&mut size_bytes).ok()?;
        let mpz_size = u32::from_le_bytes(size_bytes);
        ap_bytes.resize(mpz_size as usize, 0);
        cursor.read_exact(&mut ap_bytes).ok()?;

        cursor.read_exact(&mut size_bytes).ok()?;
        let mpz_size = u32::from_le_bytes(size_bytes);
        g_bytes.resize(mpz_size as usize, 0);
        cursor.read_exact(&mut g_bytes).ok()?;

        cursor.read_exact(&mut size_bytes).ok()?;
        let mpz_size = u32::from_le_bytes(size_bytes);
        tp_bytes.resize(mpz_size as usize, 0);
        cursor.read_exact(&mut tp_bytes).ok()?;

        cursor.read_exact(&mut size_bytes).ok()?;
        let mpz_size = u32::from_le_bytes(size_bytes);
        b0_bytes.resize(mpz_size as usize, 0);
        cursor.read_exact(&mut b0_bytes).ok()?;

        cursor.read(&mut is_neg).ok()?;

        let disc = c.h().discriminant();
        let ref_disc: cpp_core::Ref<Mpz> = cpp_core::Ref::from_raw_ref( &disc);

        let ap = MpzBox::from_bytes(&ap_bytes)?;
        let ref_ap: cpp_core::Ref<Mpz> = cpp_core::Ref::from_raw_ref( &ap.0);

        let g = MpzBox::from_bytes(&g_bytes)?;
        let ref_g: cpp_core::Ref<Mpz> = cpp_core::Ref::from_raw_ref( &g.0);

        let tp = MpzBox::from_bytes(&tp_bytes)?;
        let ref_tp: cpp_core::Ref<Mpz> = cpp_core::Ref::from_raw_ref( &tp.0);

        let b0 = MpzBox::from_bytes(&b0_bytes)?;
        let ref_b0: cpp_core::Ref<Mpz> = cpp_core::Ref::from_raw_ref( &b0.0);

        let mut neg = false;
        if *is_neg.get(0).unwrap() == 1u8{
            neg = true;
        }

        let qfi_comp = QFICompressedRepresentation::new(ref_ap, ref_g, ref_tp, ref_b0, neg);
        let ref_qfi_comp: cpp_core::Ref<QFICompressedRepresentation> = cpp_core::Ref::from_raw_ref( &qfi_comp);

        Some(QFIBox(QFI::new_2a(ref_qfi_comp, ref_disc)))

    }

}

impl Clone for CiphertextBox {
    fn clone(&self) -> Self {
        let ref_self_cipher: cpp_core::Ref<CLHSMCipherTextOfCLHSMqk> = unsafe{cpp_core::Ref::from_raw_ref( &self.0)};
        let new_cipher = unsafe{CLHSMCipherTextOfCLHSMqk::new_copy(ref_self_cipher)};
        CiphertextBox(new_cipher)
    }
}

impl CiphertextBox{
    pub unsafe fn to_bytes(&self) -> Vec<u8> {

        let ffi_c1 = __ffi::ctr_bicycl_ffi_BICYCL_QFI_QFI2(
            cpp_core::CastInto::<cpp_core::Ref<QFI>>::cast_into(self.0.c1())
                .as_raw_ptr(),
        );
        let c1_cppbox = cpp_core::CppBox::from_raw(ffi_c1).expect("attempted to construct a null CppBox");

        let ffi_c2 = __ffi::ctr_bicycl_ffi_BICYCL_QFI_QFI2(
            cpp_core::CastInto::<cpp_core::Ref<QFI>>::cast_into(self.0.c2())
                .as_raw_ptr(),
        );
        let c2_cppbox = cpp_core::CppBox::from_raw(ffi_c2).expect("attempted to construct a null CppBox");

        let c1_bytes = QFIBox(c1_cppbox).to_bytes();
        let c2_bytes = QFIBox(c2_cppbox).to_bytes();

        [
            &((c1_bytes.len() as u32).to_le_bytes()[..]),
            &c1_bytes[..],

            &((c2_bytes.len() as u32).to_le_bytes()[..]),
            &c2_bytes[..],
        ]
            .concat()
    }

    pub unsafe fn from_bytes(bytes: &[u8], c: &cpp_core::CppBox<CLHSMqk>) -> Option<CiphertextBox> {

        let mut cursor = std::io::Cursor::new(bytes); // Clone the byte slice
        let mut c1_bytes = Vec::new();
        let mut c2_bytes = Vec::new();
        let mut size_bytes = [0u8; 4];

        cursor.read_exact(&mut size_bytes).ok()?;
        let mpz_size = u32::from_le_bytes(size_bytes);
        c1_bytes.resize(mpz_size as usize, 0);
        cursor.read_exact(&mut c1_bytes).ok()?;

        cursor.read_exact(&mut size_bytes).ok()?;
        let mpz_size = u32::from_le_bytes(size_bytes);
        c2_bytes.resize(mpz_size as usize, 0);
        cursor.read_exact(&mut c2_bytes).ok()?;

        let c1 = QFIBox::from_bytes(&c1_bytes, c)?;
        let c2 = QFIBox::from_bytes(&c2_bytes, c)?;

        let ref_c1: cpp_core::Ref<QFI> = cpp_core::Ref::from_raw_ref( &c1.0);
        let ref_c2: cpp_core::Ref<QFI> = cpp_core::Ref::from_raw_ref( &c2.0);

        let c = CLHSMCipherTextOfCLHSMqk::from_2_q_f_i(ref_c1, ref_c2);

        Some(CiphertextBox(c))
    }
}

impl Clone for SecretKeyBox {
    fn clone(&self) -> Self {
        let ref_self_sk: cpp_core::Ref<CLHSMSecretKeyOfCLHSMqk> = unsafe{cpp_core::Ref::from_raw_ref( &self.0)};
        let new_sk = unsafe{CLHSMSecretKeyOfCLHSMqk::new_copy(ref_self_sk)};
        SecretKeyBox(new_sk)
    }
}

impl SecretKeyBox{

    pub unsafe fn to_bytes(&self) -> Vec<u8> {

        MpzBox(self.clone().0.get_mpz()).to_bytes()
    }

    pub unsafe fn from_bytes(bytes: &[u8], c: &cpp_core::CppBox<CLHSMqk>) -> Option<SecretKeyBox> {
        let mpz = MpzBox::from_bytes(bytes)?;
        let ref_mpz: cpp_core::Ref<Mpz> = cpp_core::Ref::from_raw_ref( &mpz.0);
        let ref_c: cpp_core::Ref<CLHSMqk> = cpp_core::Ref::from_raw_ref( c);
        Some(SecretKeyBox(CLHSMSecretKeyOfCLHSMqk::from_c_l_h_s_mqk_mpz(ref_c, ref_mpz)))
    }
}


impl Clone for PublicKeyBox {
    fn clone(&self) -> Self {
        let ref_self_pk: cpp_core::Ref<CLHSMPublicKeyOfCLHSMqk> = unsafe{cpp_core::Ref::from_raw_ref( &self.0)};
        let new_pk = unsafe{CLHSMPublicKeyOfCLHSMqk::new_copy(ref_self_pk)};
        PublicKeyBox(new_pk)
    }
}

impl PublicKeyBox{
    pub unsafe fn to_bytes(&self) -> Vec<u8> {

        let ffi_pk = __ffi::ctr_bicycl_ffi_BICYCL_QFI_QFI2(
            cpp_core::CastInto::<cpp_core::Ref<QFI>>::cast_into(self.0.elt())
                .as_raw_ptr(),
        );
        let pk_cppbox = cpp_core::CppBox::from_raw(ffi_pk).expect("attempted to construct a null CppBox");

        QFIBox(pk_cppbox).to_bytes()
    }

    pub unsafe fn from_bytes(bytes: &[u8], c: &cpp_core::CppBox<CLHSMqk>) -> Option<PublicKeyBox> {

        let ref_c: cpp_core::Ref<CLHSMqk> = cpp_core::Ref::from_raw_ref( &c);

        let qfi = QFIBox::from_bytes(bytes,c)?;
        let ref_qfi: cpp_core::Ref<QFI> = cpp_core::Ref::from_raw_ref( &qfi.0);

        Some(PublicKeyBox(CLHSMPublicKeyOfCLHSMqk::from_c_l_h_s_mqk_q_f_i(ref_c, ref_qfi)))
    }

}


impl fmt::Debug for MpzBox {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut mpz_vec = unsafe{VectorOfUchar::new()};
        let mutref_vec: cpp_core::MutRef<VectorOfUchar> = unsafe{cpp_core::MutRef::from_raw_ref( &mut mpz_vec)};
        unsafe{self.0.mpz_to_vector(mutref_vec)};
        let rust_vec = unsafe{cpp_vec_to_rust(&mutref_vec.deref())};
        write!(f, "Mpz({:?})", rust_vec)
    }
}

impl fmt::Debug for QFIBox {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {

        let ffi_a = unsafe{__ffi::ctr_bicycl_ffi_BICYCL_Mpz_Mpz1(
            cpp_core::CastInto::<cpp_core::Ref<b_i_c_y_c_l::Mpz>>::cast_into(self.0.a())
                .as_raw_ptr(),
        )};
        let cppbox_a = unsafe{cpp_core::CppBox::from_raw(ffi_a)}.expect("attempted to construct a null CppBox");

        let ffi_b = unsafe{__ffi::ctr_bicycl_ffi_BICYCL_Mpz_Mpz1(
            cpp_core::CastInto::<cpp_core::Ref<b_i_c_y_c_l::Mpz>>::cast_into(self.0.b())
                .as_raw_ptr(),
        )};
        let cppbox_b = unsafe{cpp_core::CppBox::from_raw(ffi_b)}.expect("attempted to construct a null CppBox");

        let ffi_c = unsafe{__ffi::ctr_bicycl_ffi_BICYCL_Mpz_Mpz1(
            cpp_core::CastInto::<cpp_core::Ref<b_i_c_y_c_l::Mpz>>::cast_into(self.0.c())
                .as_raw_ptr(),
        )};
        let cppbox_c = unsafe{cpp_core::CppBox::from_raw(ffi_c)}.expect("attempted to construct a null CppBox");


        write!(f, "QFI({:?}, {:?}, {:?})", MpzBox(cppbox_a) , MpzBox(cppbox_b) , MpzBox(cppbox_c) )

    }
}

impl fmt::Debug for CiphertextBox {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {

        let ffi_c1 = unsafe{__ffi::ctr_bicycl_ffi_BICYCL_QFI_QFI2(
            cpp_core::CastInto::<cpp_core::Ref<b_i_c_y_c_l::QFI>>::cast_into(self.0.c1())
                .as_raw_ptr(),
        )};
        let cppbox_c1 = unsafe{cpp_core::CppBox::from_raw(ffi_c1)}.expect("attempted to construct a null CppBox");

        let ffi_c2 = unsafe{__ffi::ctr_bicycl_ffi_BICYCL_QFI_QFI2(
            cpp_core::CastInto::<cpp_core::Ref<b_i_c_y_c_l::QFI>>::cast_into(self.0.c2())
                .as_raw_ptr(),
        )};
        let cppbox_c2 = unsafe{cpp_core::CppBox::from_raw(ffi_c2)}.expect("attempted to construct a null CppBox");

        write!(f, "Ciphertext({:?}, {:?})", QFIBox(cppbox_c1), QFIBox(cppbox_c2))

    }
}

impl fmt::Debug for SecretKeyBox {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SecretKey({:?})", MpzBox(unsafe{self.clone().0.get_mpz()}))
    }
}

impl fmt::Debug for PublicKeyBox {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let ffi_c = unsafe{__ffi::ctr_bicycl_ffi_BICYCL_QFI_QFI2(
            cpp_core::CastInto::<cpp_core::Ref<b_i_c_y_c_l::QFI>>::cast_into(self.0.elt())
                .as_raw_ptr(),
        )};
        let cppbox_c = unsafe{cpp_core::CppBox::from_raw(ffi_c)}.expect("attempted to construct a null CppBox");
        write!(f, "PublicKey({:?})", QFIBox(cppbox_c))
    }
}


/*pub unsafe fn convert_pk_to_bytes(a_pk: &PublicKeyBox) -> (Vec<u8>, Vec<u8>, Vec<u8>){

    let ffi_c = unsafe{__ffi::ctr_bicycl_ffi_BICYCL_QFI_QFI2(
        cpp_core::CastInto::<cpp_core::Ref<b_i_c_y_c_l::QFI>>::cast_into(a_pk.0.elt())
            .as_raw_ptr(),
    )};
    let cppbox_c = unsafe{cpp_core::CppBox::from_raw(ffi_c)}.expect("attempted to construct a null CppBox");

    convert_qfi_to_bytes(&mut QFIBox(cppbox_c))

}*/

pub unsafe fn rust_vec_to_cpp(data: Vec<u8>) -> CppBox<VectorOfUchar> {
    let mut a = VectorOfUchar::new();
    for i in data{
        let ref_i: cpp_std::cpp_core::Ref<u8> = unsafe {cpp_std::cpp_core::Ref::from_raw_ref(&i)};
        a.push_back(ref_i);
    }
    a
}

pub unsafe fn cpp_vec_to_rust(data: &VectorOfUchar) -> Vec<u8> {
    let mut a: Vec<u8> = Vec::new();
    for i in 0..data.size(){
        a.push(*data.at(i));
    }
    a
}